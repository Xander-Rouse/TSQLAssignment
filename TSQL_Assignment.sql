

IF OBJECT_ID('ADD_CUSTOMER') IS NOT NULL
DROP PROCEDURE ADD_CUSTOMER;
GO

CREATE PROCEDURE ADD_CUSTOMER @PCUSTID INT, @PCUSTNAME NVARCHAR(100) AS

BEGIN
    BEGIN TRY

        IF @PCUSTID < 1 OR @PCUSTID > 499
            THROW 50020, 'Customer ID out of range', 1

        INSERT INTO CUSTOMER (CUSTID, CUSTNAME, SALES_YTD, STATUS) 
        VALUES (@PCUSTID, @PCUSTNAME, 0, 'OK');

    END TRY
    BEGIN CATCH
        if ERROR_NUMBER() = 2627
            THROW 50010, 'Duplicate customer ID', 1
        ELSE IF ERROR_NUMBER() = 50020
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1
            END; 
    END CATCH;

END;

GO

/*
-- ADD_CUSTOMER TESTS

EXEC ADD_CUSTOMER @pcustid = 1, @pcustname = 'testdude2';

EXEC ADD_CUSTOMER @pcustid = 500, @pcustname = 'testdude3';

select * from customer;
*/
-- procedure 2

IF OBJECT_ID('DELETE_ALL_CUSTOMERS') IS NOT NULL
DROP PROCEDURE DELETE_ALL_CUSTOMERS;

GO

CREATE PROCEDURE DELETE_ALL_CUSTOMERS AS
BEGIN
	BEGIN TRY
		DELETE FROM CUSTOMER
		RETURN @@ROWCOUNT
	END TRY
	BEGIN CATCH
		BEGIN
			DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE()
			THROW 50000, @ERRORMESSAGE, 1
		END;
	END CATCH;
END;

GO

BEGIN
	DECLARE @OUTPUT INT;
	EXEC @OUTPUT = DELETE_ALL_CUSTOMERS;
	PRINT(CONCAT(@OUTPUT, ' RETURNED'));
END

--procedure 3

IF OBJECT_ID('ADD_PRODUCT') IS NOT NULL
DROP PROCEDURE ADD_PRODUCT;

GO

CREATE PROCEDURE ADD_PRODUCT @PPRODID INT, @PPRODNAME NVARCHAR(100), @PPRICE MONEY AS

BEGIN
    BEGIN TRY

        IF @PPRODID < 1000 OR @PPRODID > 2500
            THROW 50040, 'Product ID out of range', 1

        IF @PPRICE < 0 OR @PPRICE > 2500
            THROW 50050, 'Price out of range', 1


        INSERT INTO PRODUCT (PRODID, PRODNAME, SELLING_PRICE, SALES_YTD) 
        VALUES (@PPRODID, @PPRODNAME, @PPRICE, 0);

    END TRY
    BEGIN CATCH
        if ERROR_NUMBER() = 50040 OR ERROR_NUMBER() = 50050
            THROW
        ELSE IF ERROR_NUMBER() = 2627
            THROW 50010, 'Duplicate product ID', 1

        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1
            END; 
    END CATCH;

END;

GO

-- procedure 4

IF OBJECT_ID('DELETE_ALL_PRODUCTS') IS NOT NULL
DROP PROCEDURE DELETE_ALL_PRODUCTS;

GO

CREATE PROCEDURE DELETE_ALL_PRODUCTS AS
BEGIN
	BEGIN TRY
		DELETE FROM PRODUCT
		RETURN @@ROWCOUNT
	END TRY
	BEGIN CATCH
		BEGIN
			DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE()
			THROW 50000, @ERRORMESSAGE, 1
		END;
	END CATCH;
END;

GO

--procedure 5

IF OBJECT_ID('GET_CUSTOMER_STRING') IS NOT NULL
DROP PROCEDURE GET_CUSTOMER_STRING;

GO

CREATE PROCEDURE GET_CUSTOMER_STRING @PCUSTID INT, @PRETURNSTRING NVARCHAR(1000) OUT AS
BEGIN
	BEGIN TRY
		DECLARE @CNAME NVARCHAR(100), @STATUS NVARCHAR(7), @SALESYTD MONEY;

		SELECT@CNAME = CUSTNAME, @SALESYTD = SALES_YTD, @STATUS = STATUS
		FROM CUSTOMER WHERE CUSTID = @PCUSTID;

		IF @@ROWCOUNT = 0
			THROW 50060, 'Customer ID not found', 1
		ELSE
			SET @PRETURNSTRING = CONCAT('Custid: ', @PCUSTID, ' Name: ', @CNAME, ' Status: ', @STATUS, ' SalesYTD: ', @SALESYTD)
	END TRY
	BEGIN CATCH
		if ERROR_MESSAGE() = 50060
			THROW
		ELSE
			BEGIN
				DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE()
				THROW 50000, @ERRORMESSAGE, 1
			END
	END CATCH
END

GO

--procedure 6

IF OBJECT_ID('UPD_CUST_SALESYTD') IS NOT NULL
DROP PRECEDURE UPD_CUST_SALESYTD;

GO

CREATE PROCEDURE UPD_CUST_SALESYTD @PCUSTID INT, @PAMT MONEY AS
BEGIN
	BEGIN TRY
		if @PAMT < -999.99 OR @PAMT >999.99
			THROW 50080, 'Amount out of range', 1
		UPDATE CUSTOMER SET SALESYTD = SALES_YTD + @PAMT
		WHERE CUSTID = @PCUSTID
		if @@ROWCOUNT = 0
			THROW 50070, 'Customer ID not found', 1
	END TRY
	BEGIN CATCH
		if ERROR_NUMBER() IN (50070, 50080)
			THROW
		ELSE
			BEGIN
				DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
				THROW 50000, @ERRORMESSAGE, 1
			END
	END CATCH
END

GO

-- procedure 7

IF OBJECT_ID('GET_PRODUCT_STRING') IS NOT NULL
DROP PROCEDURE GET_PRODUCT_STRING;

GO

CREATE PROCEDURE GET_PRODUCT_STRING @PPRODID INT, @PRETURNSTRING NVARCHAR(1000) OUT AS
BEGIN
	BEGIN TRY
		DECLARE @PNAME NVARCHAR(100), @SALESYTD NVARCHAR(7), @PRICE MONEY;

		SELECT@PNAME = PRODNAME, @SALESYTD = SALES_YTD, @PRICE = SELLING_PRICE
		FROM PRODUCT WHERE PRODID = @PRODID;

		IF @@ROWCOUNT = 0
			THROW 50090, 'Product ID not found', 1
		ELSE
			SET @PRETURNSTRING = CONCAT('Prodid: ', @PPRODID, ' Name: ', @PNAME, ' Price: ', @PRICE, ' SalesYTD: ', @SALESYTD)
	END TRY
	BEGIN CATCH
		if ERROR_MESSAGE() = 50090
			THROW
		ELSE
			BEGIN
				DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE()
				THROW 50000, @ERRORMESSAGE, 1
			END
	END CATCH
END

GO

--procedure 8

IF OBJECT_ID('UPD_PROD_SALESYTD') IS NOT NULL
DROP PRECEDURE UPD_PROD_SALESYTD;

GO

CREATE PROCEDURE UPD_PROD_SALESYTD @PPRODID INT, @PAMT MONEY AS
BEGIN
	BEGIN TRY
		if @PAMT < -999.99 OR @PAMT >999.99
			THROW 50110, 'Amount out of range', 1
		UPDATE PRODUCT SET SALESYTD = SALES_YTD + @PAMT
		WHERE PRODID = @PPRODID
		if @@ROWCOUNT = 0
			THROW 50100, 'Customer ID not found', 1
	END TRY
	BEGIN CATCH
		if ERROR_NUMBER() IN (50100, 50110)
			THROW
		ELSE
			BEGIN
				DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
				THROW 50000, @ERRORMESSAGE, 1
			END
	END CATCH
END

GO

-- procedure 9

IF OBJECT_ID('UPD_CUSTOMER_STATUS') IS NOT NULL
DROP PRECEDURE UPD_CUSTOMER_STATUS;

GO

CREATE PROCEDURE UPD_CUSTOMER_STATUS @PCUSTID INT, @PSTATUS NVARCHAR(7) AS
BEGIN
	BEGIN TRY
		if @PSTATUS = 'OK' OR @PSTATUS = 'SUSPEND'
			UPDATE CUSTOMER SET STATUS = @PSTATUS
			WHERE CUSTID = @PCUSTID
		ELSE
			THROW 50130, 'Invalid status value', 1
		if @@ROWCOUNT = 0
			THROW 50120, 'Customer ID not found', 1
	END TRY
	BEGIN CATCH
		if ERROR_NUMBER() IN (50120, 50130)
			THROW
		ELSE
			BEGIN
				DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
				THROW 50000, @ERRORMESSAGE, 1
			END
	END CATCH
END

GO
